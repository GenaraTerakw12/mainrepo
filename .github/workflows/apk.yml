name: Run APK on GitHub Runner

on: 
  push:
  pull_request:
  workflow_dispatch:

jobs:
  run-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # ðŸ“Œ Checkout the repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # ðŸ“Œ Install p7zip to extract .7z files
      - name: Install p7zip
        run: sudo apt-get install -y p7zip-full

      # ðŸ“Œ Extract APK from the 7z archive
      - name: Extract APK
        run: 7z x Shadow_Ops.7z.001 -oapk_files

      # ðŸ“Œ Install Android SDK, Emulator, and ADB
      - name: Install Android SDK & Emulator
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
          sudo apt-get install -y android-sdk adb
          sudo apt-get install -y unzip wget
          mkdir -p $HOME/android-sdk/cmdline-tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip commandlinetools-linux-9477386_latest.zip -d $HOME/android-sdk/cmdline-tools
          export PATH=$HOME/android-sdk/cmdline-tools/bin:$PATH
          yes | sdkmanager --licenses
          sdkmanager --install "platform-tools" "emulator" "system-images;android-30;google_apis;x86_64"

      # ðŸ“Œ Create and Start the Android Emulator
      - name: Start Android Emulator
        run: |
          echo "no" | avdmanager create avd -n test_emulator -k "system-images;android-30;google_apis;x86_64"
          nohup emulator -avd test_emulator -no-snapshot -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -qemu > emulator.log 2>&1 &
          sleep 90  # Give the emulator time to boot

      # ðŸ“Œ Install the APK
      - name: Install APK
        run: adb install apk_files/Shadow_Ops.apk

      # ðŸ“Œ Launch the App
      - name: Launch App
        run: adb shell monkey -p com.your.app.package.name -c android.intent.category.LAUNCHER 1
        continue-on-error: true  # Ignore errors if package name is unknown

      # ðŸ“Œ Take a Screenshot and Upload as Artifact
      - name: Capture Screenshot
        run: |
          adb shell screencap -p /sdcard/screenshot.png
          adb pull /sdcard/screenshot.png .
      
      - name: Upload Screenshot
        uses: actions/upload-artifact@v3
        with:
          name: emulator-screenshot
          path: screenshot.png

      # ðŸ“Œ Install Scrcpy for screen streaming
      - name: Install Scrcpy
        run: sudo apt install -y scrcpy

      # ðŸ“Œ Install Ngrok
      - name: Install Ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok
          ngrok authtoken YOUR_NGROK_AUTH_TOKEN  # Replace with your ngrok auth token

      # ðŸ“Œ Start Scrcpy Stream and Ngrok
      - name: Start Emulator Stream
        run: |
          nohup scrcpy --tcpip --listen-port=8080 > scrcpy.log 2>&1 &
          ngrok http 8080 > ngrok.log &
          sleep 10
          curl -s localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' > ngrok_url.txt
          cat ngrok_url.txt

      # ðŸ“Œ Show Ngrok Public URL
      - name: Show Public Stream URL
        run: cat ngrok_url.txt

      # ðŸ“Œ Upload Ngrok URL as an Artifact
      - name: Upload Stream URL
        uses: actions/upload-artifact@v4
        with:
          name: emulator-stream-url
          path: ngrok_url.txt
