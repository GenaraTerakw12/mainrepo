name: Android Game Test

on: [push, pull_request]

jobs:
  test-game:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install 7zip
        run: sudo apt-get install p7zip-full

      - name: Extract Game Files
        run: 7z x apk/Shadow_Ops.7z.001 -oapk/

      - name: Set Up Android SDK
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -O cmdline-tools.zip
          
          # Create correct SDK folder structure
          mkdir -p $HOME/android-sdk/cmdline-tools
          unzip cmdline-tools.zip -d $HOME/android-sdk/cmdline-tools
          mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
      
          # Export environment variables
          export ANDROID_HOME=$HOME/android-sdk
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH
      
          # Accept licenses and install necessary components
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-30" "emulator" "system-images;android-30;default;x86_64"

            - name: Create and Start Emulator
              run: |
                export ANDROID_HOME=$HOME/android-sdk
                export ANDROID_AVD_HOME=$HOME/.android/avd
                export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH
            
                # Create AVD directory if missing
                mkdir -p $ANDROID_AVD_HOME
            
                # Install x86_64 System Image (avoid ARM due to incompatibility)
                yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "system-images;android-30;default;x86_64"
            
                # Create Emulator (x86_64 version, as ARM is not supported)
                echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test_emulator \
                  -k "system-images;android-30;default;x86_64" --device "pixel" --force
            
                # List available AVDs to confirm creation
                $ANDROID_HOME/emulator/emulator -list-avds
            
                # Start Emulator with software rendering mode (disable KVM)
                nohup $ANDROID_HOME/emulator/emulator -avd test_emulator -no-snapshot -no-audio -no-window -gpu swiftshader_indirect -accel off &

      - name: Wait for Emulator to Boot
        run: |
          export ANDROID_HOME=$HOME/android-sdk
          export PATH=$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
      
          # Start ADB server
          adb start-server
      
          # Wait for device to be detected
          timeout 600 adb wait-for-device
      
          # Wait for system to be fully booted
          boot_complete=""
          while [[ -z "$boot_complete" || "$boot_complete" != "1" ]]; do
            echo "Waiting for emulator to boot..."
            sleep 10
            boot_complete=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
          done
      
          echo "Emulator is fully booted!"

      - name: Install APK
        run: adb install apk/Shadow_Ops.apk

      - name: Launch Game
        run: adb shell monkey -p com.yourcompany.shadowops -c android.intent.category.LAUNCHER 1

      - name: Interact with Game (Simulate Tap)
        run: adb shell input tap 500 1000

      - name: Capture Logcat
        run: adb logcat -d > logcat.txt

      - name: Upload Logs
        uses: actions/upload-artifact@v4
        with:
          name: logcat
          path: logcat.txt
